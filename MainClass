import java.awt.*;
import java.util.*;
import java.lang.System;
import java.awt.event.*;

public class TheGame extends Game {
    //these must be static because they are passed to a constructor
    static int FRAMERATE = 60;
    static int SCREENWIDTH = 800;
    static int SCREENHEIGHT = 600;

    //misc global constants
    final int enemy = 10;
    final int bulletSpeed = 5;
    final double Acceleration = 0.1;
    final double Rotation = 5.0;

    //sprite state values
    final int normalState = 0;
    final int collidedState = 1;
    final int dyingState = 2;

    //not in yet
    static int lives = 3;
    
    //sprite types
    final int playerSprite = 1;
    final int spriteEnemy = 10;
    final int bulletSprite = 100;
    final int dyingSprite = 200;
    final int spriteMp = 300;
    final int spriteHP = 301;
    final int sprite250 = 302;
    final int sprite500 = 303;
    final int sprite999 = 304;

    //game states
    final int gameMenu = 0;
    final int gameRunning = 1;
    final int gameOver = 2;

    //various toggles
    boolean showBounds = false;
    boolean collisionTesting = true;

    //define the images used in the game
    ImageEntity background;
    ImageEntity bulletImage;
    ImageEntity[] theEnemy = new ImageEntity[5];
    ImageEntity[] explosions = new ImageEntity[2];
    ImageEntity[] playerImage = new ImageEntity[3];
    ImageEntity[] barImage = new ImageEntity[2];
    ImageEntity barFrame;
    ImageEntity powerupShield;
    ImageEntity powerupHealth;
    ImageEntity powerup250;
    ImageEntity powerup500;
    ImageEntity powerup1000;

    //health/shield meters and score
    int health = 20;
    int shield = 20;
    int score = 0;
    int highscore = 0;
    int firepower = 1;
    int gameState = gameMenu;

    //create a random number generator
    Random rand = new Random();

    //used to make player temporarily invulnerable
    long collisionTimer = 0;

    //some key input tracking variables
    boolean keyLeft, keyRight, keyUp, keyFire, keyB, keyC, keyShield,keyslow;


   /*****************************************************
    * constructor
    *****************************************************/
    public TheGame() {
        super(FRAMERATE, SCREENWIDTH, SCREENHEIGHT);
    }

    /*****************************************************
     * gameStartup event passed by game engine
     *****************************************************/
    void gameStartup() {

        //load the health/shield bars
        barFrame = new ImageEntity(this);
        barFrame.load("barframe.png");
        barImage[0] = new ImageEntity(this);
        barImage[0].load("HPBar.png");
        barImage[1] = new ImageEntity(this);
        barImage[1].load("MPBar.png");

        //load powerups
/*        powerupShield = new ImageEntity(this);
        powerupShield.load("MpUp.png");
        powerupHealth = new ImageEntity(this);
        powerupHealth.load("HpUp.png");
        powerup250 = new ImageEntity(this);
        powerup250.load("250Up.png");
        powerup500 = new ImageEntity(this);
        powerup500.load("500Up.png");
        powerup1000 = new ImageEntity(this);
        powerup1000.load("999up.png");*/

        //load the background image
        background = new ImageEntity(this);
        background.load("city.png");

        //create the player sprite--first in the sprite list
        playerImage[0] = new ImageEntity(this);
        playerImage[0].load("bernie3.0.png");
        playerImage[1] = new ImageEntity(this);
        playerImage[1].load("bernie3.0.png");
        playerImage[2] = new ImageEntity(this);
        playerImage[2].load("bernShield.png");

        AnimatedSprite player = new AnimatedSprite(this, graphics());
        player.setSpriteType(playerSprite);
        player.setImage(playerImage[0].getImage());
        player.setFrameWidth(player.imageWidth());
        player.setFrameHeight(player.imageHeight());
        player.setPosition(new Point2D(SCREENWIDTH/2, SCREENHEIGHT/2));
        player.setAlive(true);

        //start player off as invulnerable
        player.setState(dyingState);
        collisionTimer = System.currentTimeMillis();
        sprites().add(player);

        //load the bullet sprite image
        bulletImage = new ImageEntity(this);
        bulletImage.load("pew.png");

        //load the explosion sprite image
        explosions[0] = new ImageEntity(this);
        explosions[0].load("facesofdeath3.png");

        //load the enemies images (5 total)
        for (int n = 0; n<5; n++) {
            theEnemy[n] = new ImageEntity(this);
            String fn = "blimp" + (n+1) + ".png";
            theEnemy[n].load(fn);
            
        }
        

        //start off in pause mode
        pauseGame();
        
    }

    private void resetGame() {

        //save the player for the restart
        AnimatedSprite player = (AnimatedSprite) sprites().get(0);

        //wipe out the sprite list to start over!
        sprites().clear();

        //add the saved player to the sprite list
        player.setPosition(new Point2D(SCREENWIDTH/2, SCREENHEIGHT/2));
        player.setAlive(true);
        player.setState(dyingState);
        collisionTimer = System.currentTimeMillis();
        player.setVelocity(new Point2D(0, 0));
        sprites().add(player);

        //create the random badguy sprites
        for (int n = 0; n< enemy; n++) {
            createEnemy();
        }

        //reset variables
        health = 20;
        shield = 20;
        score = 0;
        firepower = 3;
    }

    /*****************************************************
     * gameTimedUpdate event passed by game engine
     *****************************************************/
    void gameTimedUpdate() {
        checkInput();

        if (!gamePaused() && sprites().size() == 1) {
            resetGame();
            gameState = gameOver;
        }
    }

    /*****************************************************
     * gameRefreshScreen event passed by game engine
     *****************************************************/
    void gameRefreshScreen() {
        Graphics2D g2d = graphics();

        //draw the background
        g2d.drawImage(background.getImage(),0,0,SCREENWIDTH-1,SCREENHEIGHT-1,this);

        //what is the game state?
        if (gameState == gameMenu) {
            g2d.setFont(new Font("Verdana", Font.BOLD, 36));
            g2d.setColor(Color.BLACK);
            g2d.drawString("Bernie Kong", 252, 150);
            g2d.setColor(new Color(200,30,30));
            g2d.drawString("Bernie Kong", 250, 148);

            int x = 270, y = 10;
            g2d.setFont(new Font("Times New Roman", Font.ITALIC | Font.BOLD, 20));
            g2d.setColor(Color.WHITE);
            g2d.drawString("CONTROLS:", x, ++y*20);
            g2d.drawString("ROTATE - Left/Right Arrows", x+20, ++y*20);
            g2d.drawString("THRUST - Up Arrow", x+20, ++y*20);
            g2d.drawString("SHIELD - Shift key (no points will be obtained)", x+20, ++y*20);
            g2d.drawString("FIRE - Ctrl key", x+20, ++y*20);


            g2d.setFont(new Font("Ariel", Font.BOLD, 24));
            g2d.setColor(Color.BLACK);
            g2d.drawString("Press ENTER to start", 280, 570);
        }
        else if (gameState == gameRunning) {
            //draw health/shield bars and meters
            g2d.drawImage(barFrame.getImage(), SCREENWIDTH - 132, 18, this);
            for (int n = 0; n < health; n++) {
                int dx = SCREENWIDTH - 130 + n * 5;
                g2d.drawImage(barImage[0].getImage(), dx, 20, this);
            }
            g2d.drawImage(barFrame.getImage(), SCREENWIDTH - 132, 33, this);
            for (int n = 0; n < shield; n++) {
                int dx = SCREENWIDTH - 130 + n * 5;
                g2d.drawImage(barImage[1].getImage(), dx, 35, this);
            }

            //display the score
            g2d.setFont(new Font("Verdana", Font.BOLD, 24));
            g2d.setColor(Color.WHITE);
            g2d.drawString("" + score, 20, 40);
            g2d.setColor(Color.RED);
            g2d.drawString("" + highscore, 350, 40);
        }
        else if (gameState == gameOver) {
            g2d.setFont(new Font("Verdana", Font.BOLD, 36));
            g2d.setColor(new Color(200, 30, 30));
            g2d.drawString("GAME OVER", 270, 200);

            g2d.setFont(new Font("Arial", Font.CENTER_BASELINE, 24));
            g2d.setColor(Color.ORANGE);
            g2d.drawString("Press ENTER to restart", 260, 500);
        }
    }

    /*****************************************************
     * gameShutdown event passed by game engine
     *****************************************************/
    void gameShutdown() {
//        music.stop();
//        shoot.stop();
//        explosion.stop();
    }

    /*****************************************************
     * spriteUpdate event passed by game engine
     *****************************************************/
    public void spriteUpdate(AnimatedSprite sprite) {
        switch(sprite.spriteType()) {
        case playerSprite:
            warp(sprite);
            break;

        case bulletSprite:
    //        warp(sprite);
            break;

        case dyingSprite:
            if (sprite.currentFrame() == sprite.totalFrames()-1) {
                sprite.setAlive(false);
            }
            break;

        case spriteEnemy:
            warp(sprite);
           break;

        case spriteMp:
        case spriteHP:
        case sprite250:
        case sprite500:
        case sprite999:
            warp(sprite);
            break;
        }
    }

    /*****************************************************
     * spriteDraw event passed by game engine
     * called by the game class after each sprite is drawn
     * to give you a chance to manipulate the sprite
     *****************************************************/
    public void spriteDraw(AnimatedSprite sprite) {
        if (showBounds) {
            if (sprite.collided())
                sprite.drawBounds(Color.RED);
            else
                sprite.drawBounds(Color.BLUE);
        }
    }

    /*****************************************************
     * spriteDying event passed by game engine
     * called after a sprite's age reaches its lifespan
     * at which point it will be killed off, and then removed from
     * the linked list. you can cancel the purging process here.
     *****************************************************/
    public void spriteDying(AnimatedSprite sprite) {
    }

    /*****************************************************
     * spriteCollision event passed by game engine
     *****************************************************/
    public void spriteCollision(AnimatedSprite spr1, AnimatedSprite spr2) {
        //jump out quickly if collisions are off
        if (!collisionTesting) return;

        //figure out what type of sprite has collided
        switch(spr1.spriteType()) {
        case bulletSprite:
            //did bullet hit an badguy?
            if (isEnemy(spr2.spriteType())) {
                bumpScore(5);
                spr1.setAlive(false);
                spr2.setAlive(false);
//                breakbadguy(spr2);
            }
            break;
        case playerSprite:
            //did badguy crash into the player?
            if (isEnemy(spr2.spriteType())) {
                if (spr1.state() == normalState) {
                    if (keyShield) { //***
                        shield -= 1;
                    }
                    else { //***
                        collisionTimer = System.currentTimeMillis();
                        spr1.setVelocity(new Point2D(0, 0));
                        double x = spr1.position().X() - 10;
                        double y = spr1.position().Y() - 10;
                        startBigExplosion(new Point2D(x, y));
                        spr1.setState(dyingState);
                        //reduce player health
                        health -= 20; //***
                        if (health < 0) {
                            gameState = gameOver;
                        }
                        //reduce firepower
                        firepower--;
                        if (firepower < 1) firepower = 1;

                    }
                    spr2.setAlive(false);
 //                   breakbadguy(spr2);
                }
                //make player temporarily invulnerable
                else if (spr1.state() == dyingState) {
                    if (collisionTimer + 3000 <
                        System.currentTimeMillis()) {
                        spr1.setState(normalState);
                    }
                }
            }
            break;
//***
        case spriteMp:
            if (spr2.spriteType()==playerSprite) {
                shield += 5;
                if (shield > 20) shield = 20;
                spr1.setAlive(false);
            }
            break;

        case spriteHP:
            if (spr2.spriteType()==playerSprite) {
                health += 5;
                if (health > 20) health = 20;
                spr1.setAlive(false);
            }
            break;

        case sprite250:
            if (spr2.spriteType()==playerSprite) {
                bumpScore(250);
                spr1.setAlive(false);
            }
            break;

        case sprite500:
            if (spr2.spriteType()==playerSprite) {
                bumpScore(500);
                spr1.setAlive(false);
            }
            break;

        case sprite999:
            if (spr2.spriteType()==playerSprite) {
                bumpScore(999);
                spr1.setAlive(false);
            }
            break;

//        case SPRITE_POWERUP_GUN:
//       if (spr2.spriteType()==playerSprite) {
//                firepower++;
//                if (firepower > 5) firepower = 5;
//                spr1.setAlive(false);
//            }
//            break;

        }

    }

    /*****************************************************
     * gameKeyDown event passed by game engine
     *****************************************************/
    public void gameKeyDown(int keyCode) {
        switch(keyCode) {
        case KeyEvent.VK_LEFT:
            keyLeft = true;
            break;
        case KeyEvent.VK_RIGHT:
            keyRight = true;
            break;
        case KeyEvent.VK_UP:
            keyUp = true;
            keyslow = false;
            break;
        case KeyEvent.VK_CONTROL:
            keyFire = true;
            break;
//        case KeyEvent.VK_B:
            //toggle bounding rectangles
 //           showBounds = !showBounds;
   //         break;
     //   case KeyEvent.VK_C:
            //toggle collision testing
    //        collisionTesting = !collisionTesting;
    //        break;
        case KeyEvent.VK_SHIFT:
            if ((!keyUp) && (shield > 0))
                keyShield = true;
            else
                keyShield = false;
            break;

        case KeyEvent.VK_ENTER:
            if (gameState == gameMenu) {
                resetGame();
                resumeGame();
                gameState = gameRunning;
            }
            else if (gameState == gameOver) {
                resetGame();
                resumeGame();
                gameState = gameRunning;
            }
            break;

        case KeyEvent.VK_ESCAPE:
            if (gameState == gameRunning) {
                pauseGame();
                gameState = gameOver;
            }
            break;
        }
    }

    /*****************************************************
     * gameKeyUp event passed by game engine
     *****************************************************/
    public void gameKeyUp(int keyCode) {
        switch(keyCode) {
        case KeyEvent.VK_LEFT:
            keyLeft = false;
            break;
        case KeyEvent.VK_RIGHT:
            keyRight = false;
            break;
        case KeyEvent.VK_UP:
            keyUp = false;
            keyslow= true;
            break;
        case KeyEvent.VK_CONTROL:
            keyFire = false;
            fireBullet();
            break;
        case KeyEvent.VK_SHIFT:
            keyShield = false;
            break;
        }
    }
    
    

    /*****************************************************
     * mouse events passed by game engine
     * the game is not currently using mouse input
     *****************************************************/
    public void gameMouseDown() { }
    public void gameMouseUp() { }
    public void gameMouseMove() { }

    /*****************************************************
     * create a random powerup at the supplied sprite location
     *****************************************************/
    private void spawnPowerup(AnimatedSprite sprite) {
        //only a few tiny sprites spit out a powerup
        int n = rand.nextInt(100);
        if (n > 12) return;

        //use this powerup sprite
        AnimatedSprite spr = new AnimatedSprite(this, graphics());
        spr.setRotationRate(8);
        spr.setPosition(sprite.position());
        double velx = rand.nextDouble();
        double vely = rand.nextDouble();
        spr.setVelocity(new Point2D(velx, vely));
        spr.setLifespan(1500);
        spr.setAlive(true);

        //customize the sprite based on powerup type
        switch(rand.nextInt(6)) {
        case 0:
            //create a new shield powerup sprite
            spr.setImage(powerupShield.getImage());
            spr.setSpriteType(spriteMp);
            sprites().add(spr);
            break;

        case 1:
            //create a new health powerup sprite
            spr.setImage(powerupHealth.getImage());
            spr.setSpriteType(spriteHP);
            sprites().add(spr);
            break;

        case 2:
            //create a new 250-point powerup sprite
            spr.setImage(powerup250.getImage());
            spr.setSpriteType(sprite250);
            sprites().add(spr);
            break;

        case 3:
            //create a new 500-point powerup sprite
            spr.setImage(powerup500.getImage());
            spr.setSpriteType(sprite500);
            sprites().add(spr);
            break;

        case 4:
            //create a new 1000-point powerup sprite
            spr.setImage(powerup1000.getImage());
            spr.setSpriteType(sprite999);
            sprites().add(spr);
            break;

        }
    }

    /*****************************************************
     * create a random "big" badguy
     *****************************************************/
    public void createEnemy() {
        //create a new enemy sprite
        AnimatedSprite ast = new AnimatedSprite(this, graphics());
        ast.setAlive(true);
        ast.setSpriteType(spriteEnemy);

        //pick one of the random enemy images
        int i = rand.nextInt(5);
        ast.setImage(theEnemy[i].getImage());
        ast.setFrameWidth(theEnemy[i].width());
        ast.setFrameHeight(theEnemy[i].height());

        //set to a random position on the screen
        int x = rand.nextInt(SCREENWIDTH-128);
        int y = rand.nextInt(SCREENHEIGHT-128);
        ast.setPosition(new Point2D(x, y));

        //set rotation and direction angles
        ast.setFaceAngle(rand.nextInt(360));
        ast.setMoveAngle(rand.nextInt(360));
        ast.setRotationRate(rand.nextDouble());

        //set velocity based on movement direction
        double ang = ast.moveAngle() - 90;
        double velx = calcAngleMoveX(ang);
        double vely = calcAngleMoveY(ang);
        ast.setVelocity(new Point2D(velx, vely));

        //add the new badguy to the sprite list
        sprites().add(ast);
    }

    /*****************************************************
     * returns true if passed sprite type is an badguy type
     *****************************************************/
    private boolean isEnemy(int spriteType) {
        switch(spriteType) {
        case spriteEnemy:
            return true;
        default:
            return false;
        }
    }

    /*****************************************************
     * process keys that have been pressed
     *****************************************************/
    public void checkInput() {
        if (gameState != gameRunning) return;

        //the player is always the first sprite in the linked list
        AnimatedSprite player = (AnimatedSprite)sprites().get(0);
        if (keyLeft) {
            //left arrow rotates player left 5 degrees
            player.setFaceAngle(player.faceAngle() - Rotation);
            if (player.faceAngle() < 0)
                player.setFaceAngle(360 - Rotation);

        } else if (keyRight) {
            //right arrow rotates player right 5 degrees
            player.setFaceAngle(player.faceAngle() + Rotation);
            if (player.faceAngle() > 360)
                player.setFaceAngle(Rotation);
        }
        if (keyUp) {
            //up arrow applies thrust to player
            player.setImage(playerImage[1].getImage());
            applyThrust();
        }
        else if (keyShield) {
            player.setImage(playerImage[2].getImage());
        }
        else if(keyslow){
        	playerSlow();
        }
       else
            //set player image to normal non-thrust image
            player.setImage(playerImage[0].getImage());
    }

    /*****************************************************
     * increase the thrust of the player based on facing angle
     *****************************************************/
    public void applyThrust() {
        //the player is always the first sprite in the linked list
        AnimatedSprite player = (AnimatedSprite)sprites().get(0);

        //up arrow adds thrust to player (1/10 normal speed)
        player.setMoveAngle(player.faceAngle() - 90);

        //calculate the X and Y velocity based on angle
        double velx = player.velocity().X();
        velx += calcAngleMoveX(player.moveAngle()) * Acceleration;
        if (velx < -5) velx = -5;
        else if (velx > 5) velx = 5;
        double vely = player.velocity().Y();
        vely += calcAngleMoveY(player.moveAngle()) * Acceleration;
        if (vely < -5) vely = -5;
        else if (vely > 5) vely = 5;
        player.setVelocity(new Point2D(velx, vely));

    }

    
    public void playerSlow() {
        //the player is always the first sprite in the linked list
        AnimatedSprite player = (AnimatedSprite)sprites().get(0);

        //up arrow adds thrust to player (1/10 normal speed)
        player.setMoveAngle(player.faceAngle() - 90);

        //calculate the X and Y velocity based on angle
        double velx = player.velocity().X();
        double vely = player.velocity().Y();
        
        velx = 0;
        vely = 0;
        player.setVelocity(new Point2D(velx, vely));

    }
    /*****************************************************
     * fire a bullet from the player's position and orientation
     *****************************************************/
    public void fireBullet() {
        //create the new bullet sprite
        AnimatedSprite[] bullets = new AnimatedSprite[6];

        switch(firepower) {
        case 1:
            bullets[0] = stockBullet();
            sprites().add(bullets[0]);
            break;

        case 2:
            bullets[0] = stockBullet();
            adjustDirection(bullets[0], -4);
            sprites().add(bullets[0]);

            bullets[1] = stockBullet();
            adjustDirection(bullets[1], 4);
            sprites().add(bullets[1]);

            break;

        case 3:
            bullets[0] = stockBullet();
            adjustDirection(bullets[0], -4);
            sprites().add(bullets[0]);

            bullets[1] = stockBullet();
            sprites().add(bullets[1]);

            bullets[2] = stockBullet();
            adjustDirection(bullets[2], 4);
            sprites().add(bullets[2]);

            break;

        case 4:
            bullets[0] = stockBullet();
            adjustDirection(bullets[0], -5);
            sprites().add(bullets[0]);

            bullets[1] = stockBullet();
            adjustDirection(bullets[1], 5);
            sprites().add(bullets[1]);

            bullets[2] = stockBullet();
            adjustDirection(bullets[2], -10);
            sprites().add(bullets[2]);

            bullets[3] = stockBullet();
            adjustDirection(bullets[3], 10);
            sprites().add(bullets[3]);

            break;

        case 5:
            bullets[0] = stockBullet();
            adjustDirection(bullets[0], -6);
            sprites().add(bullets[0]);

            bullets[1] = stockBullet();
            adjustDirection(bullets[1], 6);
            sprites().add(bullets[1]);

            bullets[2] = stockBullet();
            adjustDirection(bullets[2], -15);
            sprites().add(bullets[2]);

            bullets[3] = stockBullet();
            adjustDirection(bullets[3], 15);
            sprites().add(bullets[3]);

            bullets[4] = stockBullet();
            adjustDirection(bullets[4], -60);
            sprites().add(bullets[4]);

            bullets[5] = stockBullet();
            adjustDirection(bullets[5], 60);
            sprites().add(bullets[5]);
            break;
        }

//        shoot.play();

    }

    private void adjustDirection(AnimatedSprite sprite, double angle) {
        angle = sprite.faceAngle() + angle;
        if (angle < 0) angle += 360;
        else if (angle > 360) angle -= 360;
        sprite.setFaceAngle(angle);
        sprite.setMoveAngle(sprite.faceAngle()-90);
        angle = sprite.moveAngle();
        double svx = calcAngleMoveX(angle) * bulletSpeed;
        double svy = calcAngleMoveY(angle) * bulletSpeed;
        sprite.setVelocity(new Point2D(svx, svy));
    }

     private AnimatedSprite stockBullet() {
         //the player is always the first sprite in the linked list
         AnimatedSprite player = (AnimatedSprite)sprites().get(0);

         AnimatedSprite bul = new AnimatedSprite(this, graphics());
         bul.setAlive(true);
         bul.setImage(bulletImage.getImage());
         bul.setFrameWidth(bulletImage.width());
         bul.setFrameHeight(bulletImage.height());
         bul.setSpriteType(bulletSprite);
         bul.setLifespan(90);
         bul.setFaceAngle(player.faceAngle());
         bul.setMoveAngle(player.faceAngle() - 90);
         //set the bullet's velocity
         double angle = bul.moveAngle();
         double svx = calcAngleMoveX(angle) * bulletSpeed;
         double svy = calcAngleMoveY(angle) * bulletSpeed;
         bul.setVelocity(new Point2D(svx, svy));
         //set the bullet's starting position
         double x = player.center().X() - bul.imageWidth()/2;
         double y = player.center().Y() - bul.imageHeight()/2;
         bul.setPosition(new Point2D(x,y));

         return bul;
     }

    /*****************************************************
     * launch a big explosion at the passed location
     *****************************************************/
    public void startBigExplosion(Point2D point) {
        //create a new explosion at the passed location
        AnimatedSprite expl = new AnimatedSprite(this,graphics());
        expl.setSpriteType(dyingSprite);
        expl.setAlive(true);
        expl.setAnimImage(explosions[0].getImage());
        expl.setTotalFrames(16);
        expl.setColumns(4);
        expl.setFrameWidth(96);
        expl.setFrameHeight(96);
        expl.setFrameDelay(2);
        expl.setPosition(point);
        //add the new explosion to the sprite list
        sprites().add(expl);
        
    }


    /*****************************************************
     * cause sprite to warp around the edges of the screen	
     *****************************************************/
    public void warp(AnimatedSprite spr) {
        //create some shortcut variables
        int w = spr.frameWidth()-1;
        int h = spr.frameHeight()-1;

        //wrap the sprite around the screen edges
        if (spr.position().X() < 0-w)
            spr.position().setX(SCREENWIDTH);
        else if (spr.position().X() > SCREENWIDTH)
            spr.position().setX(0-w);
        if (spr.position().Y() < 0-h)
            spr.position().setY(SCREENHEIGHT);
        else if (spr.position().Y() > SCREENHEIGHT)
            spr.position().setY(0-h);
    }


    /*****************************************************
     * increment the score and update high score if needed
     *****************************************************/
    public void bumpScore(int howmuch) {
        score += howmuch;
        if (score > highscore)
            highscore = score;
    }
}
